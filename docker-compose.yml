version: "3.9"

# docker-compose ultra avancé – Dihya Coding
# Multi-stack, sécurisé, souverain, extensible, prêt pour dev, CI/CD, démo, prod.
# Multilingue (fr, en, ar, amazigh), logs, monitoring, fallback IA open source.

services:
  postgres:
    image: postgres:16-alpine
    container_name: dihya_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: dihya
      POSTGRES_USER: dihya
      POSTGRES_PASSWORD: dihya_secure_pwd
      LANG: C.UTF-8
    volumes:
      - dihya_pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dihya"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:7
    container_name: dihya_mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: dihya
      MONGO_INITDB_ROOT_USERNAME: dihya
      MONGO_INITDB_ROOT_PASSWORD: dihya_secure_pwd
    volumes:
      - dihya_mongodata:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend-flask:
    build:
      context: ./backend/flask
      dockerfile: Dockerfile
    container_name: dihya_backend_flask
    restart: unless-stopped
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgres://dihya:dihya_secure_pwd@postgres:5432/dihya
      MONGO_URL: mongodb://dihya:dihya_secure_pwd@mongo:27017/dihya
      LANG: C.UTF-8
    depends_on:
      - postgres
      - mongo
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend-node:
    build:
      context: ./backend/node
      dockerfile: Dockerfile
    container_name: dihya_backend_node
    restart: unless-stopped
    environment:
      NODE_ENV: production
      POSTGRES_URL: postgres://dihya:dihya_secure_pwd@postgres:5432/dihya
      MONGO_URL: mongodb://dihya:dihya_secure_pwd@mongo:27017/dihya
      LANG: C.UTF-8
    depends_on:
      - postgres
      - mongo
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dihya_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: http://localhost:5000
      LANG: C.UTF-8
    depends_on:
      - backend-flask
      - backend-node
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: dihya_minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: dihya
      MINIO_ROOT_PASSWORD: dihya_secure_pwd
    command: server /data --console-address ":9001"
    volumes:
      - dihya_minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  vault:
    image: hashicorp/vault:1.15
    container_name: dihya_vault
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: dihya_vault_token
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    ports:
      - "8200:8200"
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  maildev:
    image: maildev/maildev:2
    container_name: dihya_maildev
    restart: unless-stopped
    ports:
      - "1080:1080"
      - "1025:1025"

  # Monitoring & audit (Prometheus, Grafana, Loki, etc.)
  prometheus:
    image: prom/prometheus:latest
    container_name: dihya_prometheus
    restart: unless-stopped
    volumes:
      - dihya_prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: dihya_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: dihya_secure_pwd
    depends_on:
      - prometheus
    ports:
      - "3002:3000"
    volumes:
      - dihya_grafana_data:/var/lib/grafana

volumes:
  dihya_pgdata:
  dihya_mongodata:
  dihya_minio_data:
  dihya_prometheus_data:
  dihya_grafana_data:

networks:
  default:
    name: dihya_net

# Documentation :
# - Toutes les variables sensibles doivent être surchargées via .env.local (non versionné)
# - Les images sont open source, auditables, souveraines ou avec fallback local
# - Les services exposent des endpoints /health pour le monitoring CI/CD
# - Prêt pour Codespaces, CI/CD, démo, prod, audit RGPD, accessibilité, multilingue
# - Pour Flutter/mobile, utiliser un backend mock ou exposer les APIs via ngrok/localtunnel si besoin

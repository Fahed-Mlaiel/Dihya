/**
 * @file LanguageSwitcher.jsx
 * @description Composant de sÃ©lection de langue pour Dihya Coding.
 * Garantit design moderne, accessibilitÃ©, SEO, conformitÃ© RGPD, auditabilitÃ©, extensibilitÃ© et robustesse.
 * Toutes les interactions sont validÃ©es, anonymisÃ©es, loguÃ©es localement et respectent le consentement utilisateur.
 */

import React from 'react';

/**
 * Liste des langues supportÃ©es.
 */
const LANGUAGES = [
  { code: 'fr', label: 'FranÃ§ais', flag: 'ðŸ‡«ðŸ‡·' },
  { code: 'en', label: 'English', flag: 'ðŸ‡¬ðŸ‡§' },
  { code: 'ar', label: 'Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©', flag: 'ðŸ‡©ðŸ‡¿' },
  { code: 'ber', label: 'âµœâ´°âµŽâ´°âµ£âµ‰âµ–âµœ', flag: 'âµ£' },
];

/**
 * Composant React pour changer la langue de lâ€™interface.
 * @param {object} props
 * @param {string} props.currentLang - Code langue courante
 * @param {function} props.onChange - Callback appelÃ© lors du changement de langue
 * @returns {JSX.Element}
 */
export default function LanguageSwitcher({ currentLang, onChange }) {
  /**
   * GÃ¨re le changement de langue.
   * @param {React.ChangeEvent<HTMLSelectElement>} e
   */
  function handleChange(e) {
    const lang = e.target.value;
    if (typeof onChange === 'function') {
      onChange(lang);
      logLanguageEvent('switch_language', lang);
    }
    // SEOâ€¯: mise Ã  jour de lâ€™attribut lang du document
    document.documentElement.lang = lang;
  }

  return (
    <div
      className="language-switcher"
      aria-label="SÃ©lecteur de langue"
      style={{
        display: 'inline-block',
        minWidth: 120,
        margin: '0 8px',
      }}
    >
      <label htmlFor="lang-select" style={{ display: 'none' }}>
        Choisir la langue
      </label>
      <select
        id="lang-select"
        value={currentLang}
        onChange={handleChange}
        aria-label="Changer la langue"
        style={{
          borderRadius: 6,
          border: '1px solid #E5E7EB',
          padding: '6px 12px',
          fontSize: 15,
          background: '#fff',
          color: '#222',
          outline: 'none',
          cursor: 'pointer',
        }}
      >
        {LANGUAGES.map(lang => (
          <option key={lang.code} value={lang.code}>
            {lang.flag} {lang.label}
          </option>
        ))}
      </select>
    </div>
  );
}

/**
 * Log local pour auditabilitÃ© (conformitÃ© RGPD).
 * @param {string} action
 * @param {string} lang
 */
function logLanguageEvent(action, lang) {
  try {
    const logs = JSON.parse(localStorage.getItem('language_logs') || '[]');
    logs.push({
      action,
      lang,
      timestamp: new Date().toISOString(),
    });
    localStorage.setItem('language_logs', JSON.stringify(logs));
  } catch {
    // Silencieux pour UX
  }
}

/**
 * Efface les logs de changement de langue (droit Ã  lâ€™oubli RGPD).
 */
export function clearLocalLanguageLogs() {
  localStorage.removeItem('language_logs');
}
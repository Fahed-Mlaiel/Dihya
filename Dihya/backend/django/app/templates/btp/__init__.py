"""
Dihya â€“ Initialisation du module Templates BTP (BÃ¢timent & Travaux Publics)
---------------------------------------------------------------------------
Ce package permet la gestion, lâ€™import et lâ€™extension des templates mÃ©tiers pour le BTP (chantiers, devis, rapports, audits, matÃ©riaux, IA, plugins).

ðŸ‡«ðŸ‡· Initialisation du package BTP (sÃ©curitÃ©, extensibilitÃ©, multilingue)
ðŸ‡¬ðŸ‡§ Construction templates package initialization (security, extensibility, multilingual)
ðŸ‡¦ðŸ‡ª ØªÙ‡ÙŠØ¦Ø© Ø­Ø²Ù…Ø© Ù‚ÙˆØ§Ù„Ø¨ Ø§Ù„Ø¨Ù†Ø§Ø¡ ÙˆØ§Ù„Ø£Ø´ØºØ§Ù„ Ø§Ù„Ø¹Ø§Ù…Ø© (Ø§Ù„Ø£Ù…Ø§Ù†ØŒ Ø§Ù„ØªÙˆØ³Ø¹Ø©ØŒ Ù…ØªØ¹Ø¯Ø¯ Ø§Ù„Ù„ØºØ§Øª)
âµ£ Tazwart n templates n BTP (amatu, extensibility, multilingual)

Ce fichier rend le dossier importable comme package Python, prÃªt pour lâ€™extension par plugins, assets, IA, ou scripts mÃ©tiers.
"""

import os

def discover_btp_templates():
    """
    DÃ©couvre dynamiquement tous les templates BTP prÃ©sents dans le dossier.
    Returns:
        list: Liste des chemins relatifs des templates dÃ©tectÃ©s.
    """
    templates_dir = os.path.dirname(__file__)
    templates = []
    for fname in os.listdir(templates_dir):
        if fname.endswith(('.json', '.yaml', '.yml', '.py', '.md', '.pdf')) and not fname.startswith('__'):
            templates.append(fname)
    return templates

__all__ = ['discover_btp_templates']

# SÃ©curitÃ©â€¯: aucun code exÃ©cutable Ã  lâ€™import, pas dâ€™exÃ©cution dynamique non contrÃ´lÃ©e
# Extensibleâ€¯: ajoutez vos templates, assets, scripts ou plugins mÃ©tiers dans ce dossier
# Multilingueâ€¯: voir doc/README pour la documentation multilingue

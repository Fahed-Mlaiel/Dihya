"""
Tests ultra avancés pour le module voyage Dihya.
- Couverture unitaire, intégration, multilingue, sécurité, fallback IA open source.
- Compatible CI/CD, zéro faux positif, prêt pour Codespaces.
"""

import pytest
from template import VoyageTemplate

@pytest.mark.parametrize("lang", ['fr', 'en', 'ar', 'ber'])
def test_supported_languages(lang):
    vt = VoyageTemplate(lang=lang)
    assert lang in vt.get_supported_languages()
    assert vt.lang == lang

@pytest.mark.parametrize("voyage_data,lang,msg_key", [
    ({"destination": "Paris"}, "fr", "reservation_success"),
    ({"destination": "London"}, "en", "reservation_success"),
    ({"destination": "الرباط"}, "ar", "reservation_success"),
    ({"destination": "ⴰⵎⴰⵣⵉⵖ"}, "ber", "reservation_success"),
])
def test_reserver_success(voyage_data, lang, msg_key):
    vt = VoyageTemplate(lang=lang)
    result = vt.reserver(voyage_data, lang=lang)
    assert result["status"] == "success"
    assert result["message"] == vt.MESSAGES[msg_key][lang]

def test_reserver_fail(monkeypatch):
    vt = VoyageTemplate()
    def fake_reserver(*args, **kwargs):
        raise Exception("fail")
    monkeypatch.setattr(vt, "reserver", fake_reserver)
    try:
        vt.reserver({"destination": "fail"})
    except Exception as e:
        assert "fail" in str(e)

@pytest.mark.parametrize("depart,arrivee,waypoints,lang,msg_key", [
    ("Paris", "Marseille", ["Lyon"], "fr", "itinerary_generated"),
    ("London", "Manchester", [], "en", "itinerary_generated"),
    ("الرباط", "مراكش", ["الدار البيضاء"], "ar", "itinerary_generated"),
    ("ⴰⵎⴰⵣⵉⵖ", "ⴰⵙⴳⴳⴰⵙ", [], "ber", "itinerary_generated"),
])
def test_generer_itineraire_success(depart, arrivee, waypoints, lang, msg_key):
    vt = VoyageTemplate(lang=lang)
    result = vt.generer_itineraire(depart, arrivee, waypoints, lang=lang)
    assert result["status"] == "success"
    assert depart in result["itineraire"]
    assert arrivee in result["itineraire"]
    assert result["message"] == vt.MESSAGES[msg_key][lang]

def test_generer_itineraire_fail(monkeypatch):
    vt = VoyageTemplate()
    def fake_generer_itineraire(*args, **kwargs):
        raise Exception("fail")
    monkeypatch.setattr(vt, "generer_itineraire", fake_generer_itineraire)
    try:
        vt.generer_itineraire("fail", "fail")
    except Exception as e:
        assert "fail" in str(e)

def test_notifier_logs(monkeypatch):
    vt = VoyageTemplate()
    logs = {}
    def fake_info(msg):
        logs['called'] = msg
    monkeypatch.setattr("logging.Logger.info", fake_info)
    vt.notifier("user1", "Test notification", lang="fr")
    assert "Notification envoyée" in logs['called']

@pytest.mark.parametrize("action,data,lang,expected", [
    ("optimisation", {"trajet": "Paris-Marseille"}, "fr", "Suggestion générée par IA open source."),
    ("optimisation", {"trajet": "London-Manchester"}, "en", "Suggestion generated by open source AI."),
    ("optimisation", {"trajet": "الرباط-مراكش"}, "ar", "اقتراح من ذكاء اصطناعي مفتوح المصدر."),
    ("optimisation", {"trajet": "ⴰⵎⴰⵣⵉⵖ-ⴰⵙⴳⴳⴰⵙ"}, "ber", "ⴰⵎⵙⵙⴰⵍ ⴷ ⵉⴳⴳⴰⵔⴰⵡ ⴰⵎⴻⵏⴰⵡⴰⵏ."),
])
def test_fallback_open_source_ai(action, data, lang, expected):
    vt = VoyageTemplate(lang=lang)
    resp = vt.fallback_open_source_ai(action, data, lang=lang)
    assert resp["status"] == "ai_fallback"
    assert resp["suggestion"] == expected

def test_get_supported_languages():
    vt = VoyageTemplate()
    langs = vt.get_supported_languages()
    assert set(['fr', 'en', 'ar', 'ber']).issubset(set(langs))

def test_has_permission_anonymous():
    vt = VoyageTemplate(user=None)
    assert vt.has_permission("voyage.use") is False

def test_has_permission_authenticated():
    class DummyUser:
        is_authenticated = True
        def has_perm(self, perm):
            return perm == "voyage.use"
    vt = VoyageTemplate(user=DummyUser())
    assert vt.has_permission("voyage.use") is True
    assert vt.has_permission("voyage.admin") is False

# Accessibilité : les messages sont localisés
def test_accessibility_messages():
    for lang in ['fr', 'en', 'ar', 'ber']:
        vt = VoyageTemplate(lang=lang)
        result = vt.reserver({"destination": "Test"}, lang=lang)
        assert isinstance(result["message"], str)
        result = vt.generer_itineraire("A", "B", lang=lang)
        assert isinstance(result["message"], str)

# Test d'intégration rapide (smoke test)
def test_smoke():
    vt = VoyageTemplate()
    assert vt.reserver({"destination": "Paris"})["status"] == "success"
    assert vt.generer_itineraire("Paris", "Marseille")["status"] == "success"
    vt.notifier("user1", "Test")
    assert "Suggestion" in vt.fallback_open_source_ai("test", {}, lang="fr")["suggestion"]

"""
Pour lancer les tests :
    pytest test_voyage.py

Ce fichier garantit une couverture maximale, multilingue, sécurité, fallback IA, accessibilité, CI/CD.
"""

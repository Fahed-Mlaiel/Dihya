"""
Tests ultra avancés pour le module voice Dihya.
- Couverture unitaire, intégration, multilingue, sécurité, fallback IA open source.
- Compatible CI/CD, zéro faux positif, prêt pour Codespaces.
"""

import pytest
from template import VoiceTemplate

@pytest.mark.parametrize("lang", ['fr', 'en', 'ar', 'ber'])
def test_supported_languages(lang):
    vt = VoiceTemplate(lang=lang)
    assert lang in vt.get_supported_languages()
    assert vt.lang == lang

@pytest.mark.parametrize("lang,expected_text,msg_key", [
    ("fr", "Bonjour", "recognition_success"),
    ("en", "Hello", "recognition_success"),
    ("ar", "Bonjour", "recognition_success"),  # fallback to Bonjour for demo
    ("ber", "Bonjour", "recognition_success"), # fallback to Bonjour for demo
])
def test_recognize_success(lang, expected_text, msg_key):
    vt = VoiceTemplate(lang=lang)
    result = vt.recognize(b"FAKEAUDIO")
    assert result["status"] == "success"
    assert result["text"] == expected_text
    assert result["message"] == vt.MESSAGES[msg_key][lang]

def test_recognize_fail(monkeypatch):
    vt = VoiceTemplate()
    def fake_recognize(*args, **kwargs):
        raise Exception("fail")
    monkeypatch.setattr(vt, "recognize", fake_recognize)
    try:
        vt.recognize(b"FAKEAUDIO")
    except Exception as e:
        assert "fail" in str(e)

@pytest.mark.parametrize("text,lang,msg_key", [
    ("Bienvenue sur Dihya", "fr", "synthesis_success"),
    ("Welcome to Dihya", "en", "synthesis_success"),
    ("مرحبا بكم في ديهيا", "ar", "synthesis_success"),
    ("ⴰⵏⴰⵡⴰⵏ ⴷ ⴷⵉⵀⵢⴰ", "ber", "synthesis_success"),
])
def test_synthesize_success(text, lang, msg_key):
    vt = VoiceTemplate(lang=lang)
    result = vt.synthesize(text, lang=lang)
    assert result["status"] == "success"
    assert isinstance(result["audio"], bytes)
    assert result["message"] == vt.MESSAGES[msg_key][lang]

def test_synthesize_fail(monkeypatch):
    vt = VoiceTemplate()
    def fake_synthesize(*args, **kwargs):
        raise Exception("fail")
    monkeypatch.setattr(vt, "synthesize", fake_synthesize)
    try:
        vt.synthesize("fail")
    except Exception as e:
        assert "fail" in str(e)

def test_notify_audio_logs(monkeypatch):
    vt = VoiceTemplate()
    logs = {}
    def fake_info(msg):
        logs['called'] = msg
    monkeypatch.setattr("logging.Logger.info", fake_info)
    vt.notify_audio("user1", "Test audio", lang="fr")
    assert "Notification audio" in logs['called']

@pytest.mark.parametrize("action,data,lang,expected", [
    ("transcription", {"audio": "FAKEAUDIO"}, "fr", "Suggestion générée par IA open source."),
    ("transcription", {"audio": "FAKEAUDIO"}, "en", "Suggestion generated by open source AI."),
    ("transcription", {"audio": "FAKEAUDIO"}, "ar", "اقتراح من ذكاء اصطناعي مفتوح المصدر."),
    ("transcription", {"audio": "FAKEAUDIO"}, "ber", "ⴰⵎⵙⵙⴰⵍ ⴷ ⵉⴳⴳⴰⵔⴰⵡ ⴰⵎⴻⵏⴰⵡⴰⵏ."),
])
def test_fallback_open_source_ai(action, data, lang, expected):
    vt = VoiceTemplate(lang=lang)
    resp = vt.fallback_open_source_ai(action, data, lang=lang)
    assert resp["status"] == "ai_fallback"
    assert resp["suggestion"] == expected

def test_get_supported_languages():
    vt = VoiceTemplate()
    langs = vt.get_supported_languages()
    assert set(['fr', 'en', 'ar', 'ber']).issubset(set(langs))

def test_has_permission_anonymous():
    vt = VoiceTemplate(user=None)
    assert vt.has_permission("voice.use") is False

def test_has_permission_authenticated():
    class DummyUser:
        is_authenticated = True
        def has_perm(self, perm):
            return perm == "voice.use"
    vt = VoiceTemplate(user=DummyUser())
    assert vt.has_permission("voice.use") is True
    assert vt.has_permission("voice.admin") is False

# Accessibilité : les messages sont localisés
def test_accessibility_messages():
    for lang in ['fr', 'en', 'ar', 'ber']:
        vt = VoiceTemplate(lang=lang)
        result = vt.recognize(b"FAKEAUDIO")
        assert isinstance(result["message"], str)
        result = vt.synthesize("Test", lang=lang)
        assert isinstance(result["message"], str)

# Test d'intégration rapide (smoke test)
def test_smoke():
    vt = VoiceTemplate()
    assert vt.recognize(b"FAKEAUDIO")["status"] == "success"
    assert vt.synthesize("Test")["status"] == "success"
    vt.notify_audio("user1", "Test")
    assert "Suggestion" in vt.fallback_open_source_ai("test", {}, lang="fr")["suggestion"]

"""
Pour lancer les tests :
    pytest test_voice.py

Ce fichier garantit une couverture maximale, multilingue, sécurité, fallback IA, accessibilité, CI/CD.
"""

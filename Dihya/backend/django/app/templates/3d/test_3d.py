"""
Dihya â€“ Tests unitaires et dâ€™intÃ©gration pour Template3D (Ultra AvancÃ©)
-----------------------------------------------------------------------
Ce module teste la robustesse, la sÃ©curitÃ©, la conformitÃ© et lâ€™extensibilitÃ© de la classe Template3D.
Couvertureâ€¯: validation, intÃ©gritÃ©, multilingue, sÃ©curitÃ©, edge cases, CI/CD ready.

ðŸ‡«ðŸ‡· Tests unitaires et intÃ©gration pour Template3D
ðŸ‡¬ðŸ‡§ Unit & integration tests for Template3D
ðŸ‡¦ðŸ‡ª Ø§Ø®ØªØ¨Ø§Ø±Ø§Øª Ø§Ù„ÙˆØ­Ø¯Ø© ÙˆØ§Ù„ØªÙƒØ§Ù…Ù„ Ù„Ù‚Ø§Ù„Ø¨ Ø«Ù„Ø§Ø«ÙŠ Ø§Ù„Ø£Ø¨Ø¹Ø§Ø¯
âµ£ Iqedcen n unit d integration i Template3D

PrÃªt pour pytest, unittest, CI/CD, Codespaces, cloud souverain.
"""

import pytest
from template import Template3D

@pytest.fixture
def valid_template_data():
    return {
        "name": "maison_kabyle",
        "description": {
            "fr": "ModÃ¨le 3D dâ€™une maison kabyle traditionnelle.",
            "en": "3D model of a traditional Kabyle house.",
            "ar": "Ù†Ù…ÙˆØ°Ø¬ Ø«Ù„Ø§Ø«ÙŠ Ø§Ù„Ø£Ø¨Ø¹Ø§Ø¯ Ù„Ù…Ù†Ø²Ù„ Ù‚Ø¨Ø§Ø¦Ù„ÙŠ ØªÙ‚Ù„ÙŠØ¯ÙŠ.",
            "tzm": "Amodel 3D n taddart n Leqbayel."
        },
        "author": "A. Dihya",
        "version": "1.0",
        "data": {
            "vertices": [[0,0,0], [1,0,0], [1,1,0], [0,1,0]],
            "faces": [[0,1,2], [0,2,3]],
            "meta": {"type": "maison", "format": "custom"}
        }
    }

def test_template3d_valid(valid_template_data):
    tpl = Template3D(**valid_template_data)
    assert tpl.validate()
    assert isinstance(tpl.hash, str)
    assert len(tpl.hash) == 64
    meta = tpl.export_metadata()
    assert meta["name"] == valid_template_data["name"]
    assert meta["author"] == valid_template_data["author"]
    assert meta["version"] == valid_template_data["version"]
    assert meta["hash"] == tpl.hash

def test_template3d_missing_field(valid_template_data):
    data = valid_template_data.copy()
    data.pop("author")
    tpl = Template3D(
        name=data.get("name"),
        description=data.get("description"),
        author=data.get("author", None),
        version=data.get("version"),
        data=data.get("data")
    )
    assert not tpl.validate()

def test_template3d_integrity_change(valid_template_data):
    tpl = Template3D(**valid_template_data)
    original_hash = tpl.hash
    tpl.data["meta"]["type"] = "villa"
    new_hash = tpl.compute_hash()
    assert original_hash != new_hash

def test_template3d_multilingual_message(valid_template_data):
    tpl = Template3D(**valid_template_data)
    msg = tpl._msg("fr", "en", "ar", "tzm")
    assert msg == "fr"  # Par dÃ©faut, retourne le franÃ§ais

def test_template3d_export_metadata_fields(valid_template_data):
    tpl = Template3D(**valid_template_data)
    meta = tpl.export_metadata()
    assert set(meta.keys()) == {"name", "description", "author", "version", "hash"}

def test_template3d_security_no_exec():
    # VÃ©rifie quâ€™aucun code exÃ©cutable nâ€™est lancÃ© Ã  lâ€™import
    import importlib
    import sys
    module_name = "template"
    if module_name in sys.modules:
        del sys.modules[module_name]
    importlib.import_module(module_name)
    assert True  # Si aucune exception, test OK

# Edge case: donnÃ©es vides
def test_template3d_empty_data():
    tpl = Template3D(
        name="empty",
        description={"fr": "", "en": "", "ar": "", "tzm": ""},
        author="",
        version="",
        data={}
    )
    assert tpl.validate()  # Les champs sont prÃ©sents, mÃªme vides

# Edge case: description partielle
def test_template3d_partial_description(valid_template_data):
    data = valid_template_data.copy()
    data["description"] = {"fr": "Seulement en franÃ§ais"}
    tpl = Template3D(**data)
    assert tpl.validate()

# SÃ©curitÃ©â€¯: pas dâ€™accÃ¨s disque/rÃ©seau, pas dâ€™exÃ©cution dynamique, pas de faille connue
# PrÃªt CI/CD, Codespaces, cloud souverain, production, dÃ©mo, contribution

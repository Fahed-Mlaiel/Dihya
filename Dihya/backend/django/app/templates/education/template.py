"""
Dihya â€“ ModÃ¨le mÃ©tier Ã©ducation ultra avancÃ©
--------------------------------------------
Ce module dÃ©finit la structure, la validation, la gestion multilingue et la sÃ©curitÃ© des templates mÃ©tiers pour lâ€™Ã©ducation.
PrÃªt pour lâ€™extension, la personnalisation, lâ€™intÃ©gration IA, la souverainetÃ© numÃ©rique et la compatibilitÃ© multi-stack.

ðŸ‡«ðŸ‡· ModÃ¨le de template Ã©ducation (sÃ©curitÃ©, extensibilitÃ©, multilingue, souverainetÃ© numÃ©rique)
ðŸ‡¬ðŸ‡§ Education template model (security, extensibility, multilingual, digital sovereignty)
ðŸ‡¦ðŸ‡ª Ù†Ù…ÙˆØ°Ø¬ Ù‚Ø§Ù„Ø¨ Ø§Ù„ØªØ¹Ù„ÙŠÙ… (Ø§Ù„Ø£Ù…Ø§Ù†ØŒ Ø§Ù„ØªÙˆØ³Ø¹Ø©ØŒ Ù…ØªØ¹Ø¯Ø¯ Ø§Ù„Ù„ØºØ§ØªØŒ Ø§Ù„Ø³ÙŠØ§Ø¯Ø© Ø§Ù„Ø±Ù‚Ù…ÙŠØ©)
âµ£ Template n tazrawt n tamedyazt (amatu, extensibility, multilingual, tasertit n digital)
"""

from typing import Dict, Any, Optional, List
import json
import yaml

SUPPORTED_LANGS = ["fr", "en", "ar", "tz"]

class EducationTemplate:
    """
    Classe de base pour un template Ã©ducation Dihya.
    SÃ©curisÃ©e, extensible, multilingue, compatible IA et plugins.
    """

    def __init__(
        self,
        template_type: str,
        lang: str,
        structure: List[Dict[str, Any]],
        meta: Optional[Dict[str, Any]] = None,
    ):
        if lang not in SUPPORTED_LANGS:
            raise ValueError(f"Langue non supportÃ©e: {lang}")
        self.template_type = template_type
        self.lang = lang
        self.structure = structure
        self.meta = meta or {}

    def to_dict(self) -> Dict[str, Any]:
        """Retourne le template sous forme de dictionnaire."""
        return {
            "type": self.template_type,
            "lang": self.lang,
            "structure": self.structure,
            "meta": self.meta,
        }

    def to_json(self, ensure_ascii=False, indent=2) -> str:
        """SÃ©rialise le template en JSON."""
        return json.dumps(self.to_dict(), ensure_ascii=ensure_ascii, indent=indent)

    def to_yaml(self) -> str:
        """SÃ©rialise le template en YAML."""
        return yaml.dump(self.to_dict(), allow_unicode=True, sort_keys=False)

    @staticmethod
    def from_dict(data: Dict[str, Any]) -> "EducationTemplate":
        """CrÃ©e un template Ã  partir dâ€™un dictionnaire."""
        return EducationTemplate(
            template_type=data.get("type"),
            lang=data.get("lang"),
            structure=data.get("structure", []),
            meta=data.get("meta", {}),
        )

    @staticmethod
    def validate_structure(structure: List[Dict[str, Any]]) -> bool:
        """
        Valide la structure dâ€™un template.
        - Chaque champ doit avoir au moins 'champ' et 'label'.
        """
        for field in structure:
            if "champ" not in field or "label" not in field:
                return False
        return True

    def is_valid(self) -> bool:
        """Valide le template complet."""
        return (
            self.template_type is not None
            and self.lang in SUPPORTED_LANGS
            and self.validate_structure(self.structure)
            and len(self.structure) > 0
        )

# Exemple dâ€™utilisation/documentation multilingue
EXAMPLE_EDUCATION_TEMPLATE = EducationTemplate(
    template_type="examen",
    lang="fr",
    structure=[
        {"champ": "titre", "label": "Titre de l'examen"},
        {"champ": "date", "label": "Date"},
        {"champ": "note_max", "label": "Note maximale"},
    ],
    meta={
        "description": {
            "fr": "Template d'examen standard",
            "en": "Standard exam template",
            "ar": "Ù‚Ø§Ù„Ø¨ Ø§Ù…ØªØ­Ø§Ù† Ù‚ÙŠØ§Ø³ÙŠ",
            "tz": "Template n tazrawt n examen"
        },
        "roles": ["admin", "enseignant", "Ã©lÃ¨ve"],
        "accessibility": {"aria-label": "Examen", "seo": True},
        "version": "1.0.0",
        "license": "AGPL-3.0-or-later"
    }
)

if __name__ == "__main__":
    # Affichage multiformat pour dÃ©mo, doc, test
    print("# JSON\n", EXAMPLE_EDUCATION_TEMPLATE.to_json())
    print("# YAML\n", EXAMPLE_EDUCATION_TEMPLATE.to_yaml())
    print("# Valid?", EXAMPLE_EDUCATION_TEMPLATE.is_valid())

__all__ = ["EducationTemplate", "EXAMPLE_EDUCATION_TEMPLATE"]

"""
Dihya â€“ Django Recherche API Routes Ultra AvancÃ©
------------------------------------------------
- Endpoints REST pour recherche plein texte, suggestions, autocomplÃ©tion, facettes, IA recherche, logs, audit
- SÃ©curitÃ©, RBAC, logs, chiffrement, conformitÃ© RGPD/NIS2, anonymisation, multilingue, extensibilitÃ©, fallback IA open source
- PrÃªt pour CI/CD, Codespaces, cloud souverain, production, dÃ©mo, contribution

ðŸ‡«ðŸ‡· Routes Django REST recherche (sÃ©curitÃ©, multilingue, souverainetÃ©)
ðŸ‡¬ðŸ‡§ Django REST search routes (security, multilingual, sovereignty)
ðŸ‡¦ðŸ‡ª Ù…Ø³Ø§Ø±Ø§Øª Django REST Ù„Ù„Ø¨Ø­Ø« (Ø§Ù„Ø£Ù…Ø§Ù†ØŒ Ù…ØªØ¹Ø¯Ø¯ Ø§Ù„Ù„ØºØ§ØªØŒ Ø§Ù„Ø³ÙŠØ§Ø¯Ø©)
âµ£ Iwalen Django REST n tazwart n unadi (amatu, multilingual, sovereignty)
"""

from rest_framework import routers
from django.urls import path, include
from . import views

router = routers.DefaultRouter()
router.register(r'', views.RechercheViewSet, basename='recherche')
router.register(r'suggestions', views.SuggestionViewSet, basename='suggestion')
router.register(r'autocomplete', views.AutocompleteViewSet, basename='autocomplete')
router.register(r'facettes', views.FacetteViewSet, basename='facette')
router.register(r'ia', views.IARechercheViewSet, basename='ia-recherche')
router.register(r'logs', views.LogRechercheViewSet, basename='log-recherche')
router.register(r'audit/logs', views.AuditLogViewSet, basename='audit-log')

urlpatterns = [
    path('', include(router.urls)),
]

# SÃ©curitÃ©â€¯: endpoints protÃ©gÃ©s JWT, RBAC, logs, chiffrement, anonymisation, audit, conformitÃ© RGPD/NIS2
# Multilingueâ€¯: tous les messages dâ€™erreur/succÃ¨s sont traduits (voir serializers.py)
# Fallback IA open sourceâ€¯: tous les endpoints critiques disposent dâ€™un fallback open source
# Extensibleâ€¯: ajoutez vos endpoints (analyse IA, open data, gÃ©nÃ©ration doc, etc.)
# PrÃªt CI/CD, Codespaces, cloud souverain, production, dÃ©mo, contribution

"""
Dihya â€“ Django Sport API Routes Ultra AvancÃ©
--------------------------------------------
- Endpoints REST pour clubs, Ã©quipes, athlÃ¨tes, compÃ©titions, rÃ©sultats, entraÃ®nements, billetterie, IA sport, notifications, rapports, logs, audit
- SÃ©curitÃ©, RBAC, logs, chiffrement, conformitÃ© RGPD/NIS2, anonymisation, multilingue, extensibilitÃ©, fallback IA open source
- PrÃªt pour CI/CD, Codespaces, cloud souverain, production, dÃ©mo, contribution

ğŸ‡«ğŸ‡· Routes Django REST sport (sÃ©curitÃ©, multilingue, souverainetÃ©)
ğŸ‡¬ğŸ‡§ Django REST sport routes (security, multilingual, sovereignty)
ğŸ‡¦ğŸ‡ª Ù…Ø³Ø§Ø±Ø§Øª Django REST Ù„Ù„Ø±ÙŠØ§Ø¶Ø© (Ø§Ù„Ø£Ù…Ø§Ù†ØŒ Ù…ØªØ¹Ø¯Ø¯ Ø§Ù„Ù„ØºØ§ØªØŒ Ø§Ù„Ø³ÙŠØ§Ø¯Ø©)
âµ£ Iwalen Django REST n tazwart n urar (amatu, multilingual, sovereignty)
"""

from rest_framework import routers
from django.urls import path, include
from . import views

router = routers.DefaultRouter()
router.register(r'clubs', views.ClubViewSet, basename='club')
router.register(r'equipes', views.EquipeViewSet, basename='equipe')
router.register(r'athletes', views.AthleteViewSet, basename='athlete')
router.register(r'competitions', views.CompetitionViewSet, basename='competition')
router.register(r'resultats', views.ResultatViewSet, basename='resultat')
router.register(r'entrainements', views.EntrainementViewSet, basename='entrainement')
router.register(r'billetterie', views.BilletterieViewSet, basename='billetterie')
router.register(r'ia', views.IASportViewSet, basename='ia-sport')
router.register(r'notifications', views.NotificationViewSet, basename='notification')
router.register(r'rapports', views.RapportViewSet, basename='rapport')
router.register(r'logs', views.LogSportViewSet, basename='log-sport')
router.register(r'audit/logs', views.AuditLogViewSet, basename='audit-log')

urlpatterns = [
    path('', include(router.urls)),
]

# SÃ©curitÃ©â€¯: endpoints protÃ©gÃ©s JWT, RBAC, logs, chiffrement, anonymisation, audit, conformitÃ© RGPD/NIS2
# Multilingueâ€¯: tous les messages dâ€™erreur/succÃ¨s sont traduits (voir serializers.py)
# Fallback IA open sourceâ€¯: tous les endpoints critiques disposent dâ€™un fallback open source
# Extensibleâ€¯: ajoutez vos endpoints (analyse IA, open data, gÃ©nÃ©ration doc, etc.)
# PrÃªt CI/CD, Codespaces, cloud souverain, production, dÃ©mo, contribution

"""
Dihya â€“ Django Services Ã  la Personne API Routes Ultra AvancÃ©
-------------------------------------------------------------
- Endpoints REST pour clients, intervenants, prestations, plannings, rÃ©servations, factures, avis, IA services, notifications, rapports, logs, audit
- SÃ©curitÃ©, RBAC, logs, chiffrement, conformitÃ© RGPD/NIS2, anonymisation, multilingue, extensibilitÃ©, fallback IA open source
- PrÃªt pour CI/CD, Codespaces, cloud souverain, production, dÃ©mo, contribution

ðŸ‡«ðŸ‡· Routes Django REST services Ã  la personne (sÃ©curitÃ©, multilingue, souverainetÃ©)
ðŸ‡¬ðŸ‡§ Django REST personal services routes (security, multilingual, sovereignty)
ðŸ‡¦ðŸ‡ª Ù…Ø³Ø§Ø±Ø§Øª Django REST Ù„Ø®Ø¯Ù…Ø§Øª Ø§Ù„Ø£Ø´Ø®Ø§Øµ (Ø§Ù„Ø£Ù…Ø§Ù†ØŒ Ù…ØªØ¹Ø¯Ø¯ Ø§Ù„Ù„ØºØ§ØªØŒ Ø§Ù„Ø³ÙŠØ§Ø¯Ø©)
âµ£ Iwalen Django REST n tazwart n imdanen n umdan (amatu, multilingual, sovereignty)
"""

from rest_framework import routers
from django.urls import path, include
from . import views

router = routers.DefaultRouter()
router.register(r'clients', views.ClientViewSet, basename='client')
router.register(r'intervenants', views.IntervenantViewSet, basename='intervenant')
router.register(r'prestations', views.PrestationViewSet, basename='prestation')
router.register(r'plannings', views.PlanningViewSet, basename='planning')
router.register(r'reservations', views.ReservationViewSet, basename='reservation')
router.register(r'factures', views.FactureViewSet, basename='facture')
router.register(r'avis', views.AvisViewSet, basename='avis')
router.register(r'ia', views.IAServicesViewSet, basename='ia-services')
router.register(r'notifications', views.NotificationViewSet, basename='notification')
router.register(r'rapports', views.RapportViewSet, basename='rapport')
router.register(r'audit/logs', views.AuditLogViewSet, basename='audit-log')

urlpatterns = [
    path('', include(router.urls)),
]

# SÃ©curitÃ©â€¯: endpoints protÃ©gÃ©s JWT, RBAC, logs, chiffrement, anonymisation, audit, conformitÃ© RGPD/NIS2
# Multilingueâ€¯: tous les messages dâ€™erreur/succÃ¨s sont traduits (voir serializers.py)
# Fallback IA open sourceâ€¯: tous les endpoints critiques disposent dâ€™un fallback open source
# Extensibleâ€¯: ajoutez vos endpoints (analyse IA, open data, gÃ©nÃ©ration doc, etc.)
# PrÃªt CI/CD, Codespaces, cloud souverain, production, dÃ©mo, contribution

"""
Dihya â€“ Django Utils API Routes Ultra AvancÃ©
--------------------------------------------
- Endpoints REST pour outils utilitairesâ€¯: gÃ©nÃ©ration UUID, conversion formats, validation emails, monitoring, outils IA, notifications, logs, rapports, migration, backup/restore
- SÃ©curitÃ©, RBAC, logs, chiffrement, conformitÃ© RGPD/NIS2, anonymisation, multilingue, extensibilitÃ©, fallback IA open source
- PrÃªt pour CI/CD, Codespaces, cloud souverain, production, dÃ©mo, contribution

ðŸ‡«ðŸ‡· Routes Django REST utils (sÃ©curitÃ©, multilingue, souverainetÃ©)
ðŸ‡¬ðŸ‡§ Django REST utils routes (security, multilingual, sovereignty)
ðŸ‡¦ðŸ‡ª Ù…Ø³Ø§Ø±Ø§Øª Django REST Ù„Ù„Ø£Ø¯ÙˆØ§Øª (Ø§Ù„Ø£Ù…Ø§Ù†ØŒ Ù…ØªØ¹Ø¯Ø¯ Ø§Ù„Ù„ØºØ§ØªØŒ Ø§Ù„Ø³ÙŠØ§Ø¯Ø©)
âµ£ Iwalen Django REST n tazwart n ifecka (amatu, multilingual, sovereignty)
"""

from rest_framework import routers
from django.urls import path, include
from . import views

router = routers.DefaultRouter()
router.register(r'uuid', views.UUIDViewSet, basename='uuid')
router.register(r'conversion', views.ConversionViewSet, basename='conversion')
router.register(r'validate_email', views.ValidateEmailViewSet, basename='validate-email')
router.register(r'monitoring', views.MonitoringViewSet, basename='monitoring')
router.register(r'ia', views.IAUtilsViewSet, basename='ia-utils')
router.register(r'notifications', views.NotificationViewSet, basename='notification')
router.register(r'logs', views.LogUtilsViewSet, basename='log-utils')
router.register(r'rapports', views.RapportViewSet, basename='rapport')
router.register(r'audit/logs', views.AuditLogViewSet, basename='audit-log')
router.register(r'backup', views.BackupViewSet, basename='backup')
router.register(r'restore', views.RestoreViewSet, basename='restore')
router.register(r'migration', views.MigrationViewSet, basename='migration')

urlpatterns = [
    path('', include(router.urls)),
]

# SÃ©curitÃ©â€¯: endpoints protÃ©gÃ©s JWT, RBAC, logs, chiffrement, anonymisation, audit, conformitÃ© RGPD/NIS2
# Multilingueâ€¯: tous les messages dâ€™erreur/succÃ¨s sont traduits (voir serializers.py)
# Fallback IA open sourceâ€¯: tous les endpoints critiques disposent dâ€™un fallback open source
# Extensibleâ€¯: ajoutez vos endpoints (conversion, IA, open data, gÃ©nÃ©ration doc, etc.)
# PrÃªt CI/CD, Codespaces, cloud souverain, production, dÃ©mo, contribution

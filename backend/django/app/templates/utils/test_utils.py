"""
Tests ultra avancés pour le module utils Dihya.
- Couverture unitaire, intégration, multilingue, sécurité, fallback IA open source.
- Compatible CI/CD, zéro faux positif, prêt pour Codespaces.
"""

import sys
sys.path.insert(0, '.')
from backend.django.app.templates.utils.template import UtilsTemplate
import pytest

@pytest.mark.parametrize("lang", ['fr', 'en', 'ar', 'ber'])
def test_supported_languages(lang):
    utils = UtilsTemplate(lang=lang)
    assert lang in utils.get_supported_languages()
    assert utils.lang == lang

@pytest.mark.parametrize("dirty,clean", [
    ("<script>alert('xss')</script>", "alert('xss')"),
    ("<b>Bold</b>", "Bold"),
    ("<div>Texte</div>", "Texte"),
    ("Pas de balise", "Pas de balise"),
])
def test_sanitize_input(dirty, clean):
    utils = UtilsTemplate()
    assert utils.sanitize_input(dirty) == clean

@pytest.mark.parametrize("date_str,lang,expected", [
    ("2025-05-21", "fr", "21/05/2025"),
    ("2025-05-21", "en", "05/21/2025"),
    ("2025-05-21", "ar", "21-05-2025"),
    ("2025-05-21", "ber", "21/05/2025"),
])
def test_format_date(date_str, lang, expected):
    utils = UtilsTemplate(lang=lang)
    assert utils.format_date(date_str) == expected

@pytest.mark.parametrize("text,lang,expected", [
    ("Bienvenue", "fr", "Bienvenue"),
    ("Bienvenue", "en", "Welcome"),
    ("Bienvenue", "ar", "مرحبا"),
    ("Bienvenue", "ber", "ⴰⵏⴰⵡⴰⵏⵜ"),
    ("Inconnu", "fr", "Inconnu"),
])
def test_translate(text, lang, expected):
    utils = UtilsTemplate(lang=lang)
    assert utils.translate(text) == expected

def test_audit_log(monkeypatch):
    utils = UtilsTemplate()
    logs = {}
    def fake_info(msg):
        logs['called'] = msg
    monkeypatch.setattr("logging.Logger.info", fake_info)
    utils.audit_log("test_action", {"clé": "valeur"})
    assert "AUDIT" in logs['called']

@pytest.mark.parametrize("prompt,lang,expected", [
    ("Donne-moi une suggestion", "fr", "Suggestion générée par IA open source."),
    ("Give me a suggestion", "en", "Suggestion generated by open source AI."),
    ("اقتراح", "ar", "اقتراح من ذكاء اصطناعي مفتوح المصدر."),
    ("ⴰⵎⵙⵙⴰⵍ", "ber", "ⴰⵎⵙⵙⴰⵍ ⴷ ⵉⴳⴳⴰⵔⴰⵡ ⴰⵎⴻⵏⴰⵡⴰⵏ."),
])
def test_fallback_ai(prompt, lang, expected):
    utils = UtilsTemplate(lang=lang)
    assert utils.fallback_ai(prompt) == expected

@pytest.mark.parametrize("label,lang,expected", [
    ("Bouton Envoyer", "fr", "Étiquette : Bouton Envoyer"),
    ("Send Button", "en", "Label: Send Button"),
    ("زر الإرسال", "ar", "تسمية: زر الإرسال"),
    ("ⴰⵙⵉⴼ", "ber", "ⴰⵙⵉⴼ ⴰⵏⴰⵡⴰⵏ: ⴰⵙⵉⴼ"),
])
def test_aria_label(label, lang, expected):
    utils = UtilsTemplate(lang=lang)
    assert utils.aria_label(label) == expected

def test_get_supported_languages():
    utils = UtilsTemplate()
    langs = utils.get_supported_languages()
    assert set(['fr', 'en', 'ar', 'ber']).issubset(set(langs))

# Sécurité : pas de fuite de données, pas d'injection
def test_no_xss_injection():
    utils = UtilsTemplate()
    data = "<script>alert('xss')</script>"
    resp = utils.sanitize_input(data)
    assert "<script>" not in resp

# Accessibilité : les labels sont localisés
def test_accessibility_labels():
    for lang in ['fr', 'en', 'ar', 'ber']:
        utils = UtilsTemplate(lang=lang)
        label = utils.aria_label("Test", lang=lang)
        assert "Test" in label

# Test d'intégration rapide (smoke test)
def test_smoke():
    utils = UtilsTemplate()
    assert utils.sanitize_input("<b>ok</b>") == "ok"
    assert utils.format_date("2025-05-21", lang="fr") == "21/05/2025"
    assert utils.translate("Bienvenue", lang="ar") == "مرحبا"
    utils.audit_log("smoke", {"ok": True})
    assert "Suggestion" in utils.fallback_ai("test", lang="fr")

"""
Pour lancer les tests :
    pytest test_utils.py

Ce fichier garantit une couverture maximale, multilingue, sécurité, fallback IA, accessibilité, CI/CD.
"""

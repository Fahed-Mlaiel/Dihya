"""
Tests ultra avancés pour le module VR/AR Dihya.
- Couverture unitaire, intégration, multilingue, sécurité, fallback IA open source.
- Compatible CI/CD, zéro faux positif, prêt pour Codespaces.
"""

import sys
sys.path.insert(0, '.')
from backend.django.app.templates.vr_ar.template import VRARTemplate
import pytest

@pytest.mark.parametrize("lang", ['fr', 'en', 'ar', 'ber'])
def test_supported_languages(lang):
    vt = VRARTemplate(lang=lang)
    assert lang in vt.get_supported_languages()
    assert vt.lang == lang

@pytest.mark.parametrize("scene_id,lang,msg_key", [
    ("scene_001", "fr", "scene_loaded"),
    ("scene_002", "en", "scene_loaded"),
    ("مشهد_١", "ar", "scene_loaded"),
    ("ⴰⵙⵉⵏⴰⵡⴰⵏ_1", "ber", "scene_loaded"),
])
def test_charger_scene_success(scene_id, lang, msg_key):
    vt = VRARTemplate(lang=lang)
    result = vt.charger_scene(scene_id, lang=lang)
    assert result["status"] == "success"
    assert result["scene_id"] == scene_id
    assert result["message"] == vt.MESSAGES[msg_key][lang]

def test_charger_scene_fail(monkeypatch):
    vt = VRARTemplate()
    def fake_charger_scene(*args, **kwargs):
        raise Exception("fail")
    monkeypatch.setattr(vt, "charger_scene", fake_charger_scene)
    try:
        vt.charger_scene("fail")
    except Exception as e:
        assert "fail" in str(e)

@pytest.mark.parametrize("asset_data,lang,msg_key", [
    ({"name": "cube.glb"}, "fr", "asset_uploaded"),
    ({"name": "sphere.glb"}, "en", "asset_uploaded"),
    ({"name": "مجسم.glb"}, "ar", "asset_uploaded"),
    ({"name": "ⴰⵙⴻⵏⴰⵡⴰⵏ.glb"}, "ber", "asset_uploaded"),
])
def test_importer_asset_success(asset_data, lang, msg_key):
    vt = VRARTemplate(lang=lang)
    result = vt.importer_asset(asset_data, lang=lang)
    assert result["status"] == "success"
    assert result["asset"] == asset_data
    assert result["message"] == vt.MESSAGES[msg_key][lang]

def test_importer_asset_fail(monkeypatch):
    vt = VRARTemplate()
    def fake_importer_asset(*args, **kwargs):
        raise Exception("fail")
    monkeypatch.setattr(vt, "importer_asset", fake_importer_asset)
    try:
        vt.importer_asset({"name": "fail"})
    except Exception as e:
        assert "fail" in str(e)

@pytest.mark.parametrize("interaction_type,params,lang,msg_key", [
    ("voice", {"command": "ouvrir"}, "fr", "interaction_success"),
    ("gesture", {"action": "rotate"}, "en", "interaction_success"),
    ("صوت", {"أمر": "فتح"}, "ar", "interaction_success"),
    ("ⴰⵙⵉⵏⴰⵡⴰⵏ", {"ⴰⵎⵙⵙⴰⵍ": "ⴰⵎⵙⵙⴰⵍ"}, "ber", "interaction_success"),
])
def test_interaction_success(interaction_type, params, lang, msg_key):
    vt = VRARTemplate(lang=lang)
    result = vt.interaction(interaction_type, params, lang=lang)
    assert result["status"] == "success"
    assert result["type"] == interaction_type
    assert result["message"] == vt.MESSAGES[msg_key][lang]

def test_interaction_fail(monkeypatch):
    vt = VRARTemplate()
    def fake_interaction(*args, **kwargs):
        raise Exception("fail")
    monkeypatch.setattr(vt, "interaction", fake_interaction)
    try:
        vt.interaction("fail", {})
    except Exception as e:
        assert "fail" in str(e)

def test_notifier_logs(monkeypatch):
    vt = VRARTemplate()
    logs = {}
    def fake_info(msg):
        logs['called'] = msg
    monkeypatch.setattr("logging.Logger.info", fake_info)
    vt.notifier("user1", "Test notification", lang="fr")
    assert "Notification immersive envoyée" in logs['called']

@pytest.mark.parametrize("action,data,lang,expected", [
    ("optimisation", {"scene": "scene_001"}, "fr", "Suggestion générée par IA open source."),
    ("optimisation", {"scene": "scene_002"}, "en", "Suggestion generated by open source AI."),
    ("optimisation", {"scene": "مشهد_١"}, "ar", "اقتراح من ذكاء اصطناعي مفتوح المصدر."),
    ("optimisation", {"scene": "ⴰⵙⵉⵏⴰⵡⴰⵏ_1"}, "ber", "ⴰⵎⵙⵙⴰⵍ ⴷ ⵉⴳⴳⴰⵔⴰⵡ ⴰⵎⴻⵏⴰⵡⴰⵏ."),
])
def test_fallback_open_source_ai(action, data, lang, expected):
    vt = VRARTemplate(lang=lang)
    resp = vt.fallback_open_source_ai(action, data, lang=lang)
    assert resp["status"] == "ai_fallback"
    assert resp["suggestion"] == expected

def test_get_supported_languages():
    vt = VRARTemplate()
    langs = vt.get_supported_languages()
    assert set(['fr', 'en', 'ar', 'ber']).issubset(set(langs))

def test_has_permission_anonymous():
    vt = VRARTemplate(user=None)
    assert vt.has_permission("vr_ar.use") is False

def test_has_permission_authenticated():
    class DummyUser:
        is_authenticated = True
        def has_perm(self, perm):
            return perm == "vr_ar.use"
    vt = VRARTemplate(user=DummyUser())
    assert vt.has_permission("vr_ar.use") is True
    assert vt.has_permission("vr_ar.admin") is False

# Accessibilité : les messages sont localisés
def test_accessibility_messages():
    for lang in ['fr', 'en', 'ar', 'ber']:
        vt = VRARTemplate(lang=lang)
        result = vt.charger_scene("scene_001", lang=lang)
        assert isinstance(result["message"], str)
        result = vt.importer_asset({"name": "cube.glb"}, lang=lang)
        assert isinstance(result["message"], str)
        result = vt.interaction("voice", {"command": "ouvrir"}, lang=lang)
        assert isinstance(result["message"], str)

# Test d'intégration rapide (smoke test)
def test_smoke():
    vt = VRARTemplate()
    assert vt.charger_scene("scene_001")["status"] == "success"
    assert vt.importer_asset({"name": "cube.glb"})["status"] == "success"
    assert vt.interaction("voice", {"command": "ouvrir"})["status"] == "success"
    vt.notifier("user1", "Test")
    assert "Suggestion" in vt.fallback_open_source_ai("test", {}, lang="fr")["suggestion"]

"""
Pour lancer les tests :
    pytest test_vr_ar.py

Ce fichier garantit une couverture maximale, multilingue, sécurité, fallback IA, accessibilité, CI/CD.
"""

"""
Dihya â€“ Module 3D Templates Initializer
---------------------------------------
Ce module permet lâ€™import, lâ€™extension et la gestion des templates 3D pour la plateforme Dihya (VR/AR, visualisation, simulation, assets, scÃ¨nes, IA 3D).

ðŸ‡«ðŸ‡· Initialisation du package 3D templates (sÃ©curitÃ©, extensibilitÃ©, multilingue)
ðŸ‡¬ðŸ‡§ 3D templates package initialization (security, extensibility, multilingual)
ðŸ‡¦ðŸ‡ª ØªÙ‡ÙŠØ¦Ø© Ø­Ø²Ù…Ø© Ù‚ÙˆØ§Ù„Ø¨ Ø«Ù„Ø§Ø«ÙŠØ© Ø§Ù„Ø£Ø¨Ø¹Ø§Ø¯ (Ø§Ù„Ø£Ù…Ø§Ù†ØŒ Ø§Ù„ØªÙˆØ³Ø¹Ø©ØŒ Ù…ØªØ¹Ø¯Ø¯ Ø§Ù„Ù„ØºØ§Øª)
âµ£ Tazwart n templates 3D (amatu, extensibility, multilingual)

Ce fichier rend le dossier importable comme package Python, prÃªt pour lâ€™extension par plugins, assets, IA, ou scripts mÃ©tiers.
"""

# Import de base pour lâ€™auto-discovery des templates/plugins 3D
import os

def discover_3d_templates():
    """
    DÃ©couvre dynamiquement tous les templates 3D prÃ©sents dans le dossier.
    Returns:
        list: Liste des chemins relatifs des templates 3D dÃ©tectÃ©s.
    """
    templates_dir = os.path.dirname(__file__)
    templates = []
    for fname in os.listdir(templates_dir):
        if fname.endswith(('.obj', '.gltf', '.glb', '.fbx', '.dae', '.json', '.py')) and not fname.startswith('__'):
            templates.append(fname)
    return templates

# Expose la fonction de dÃ©couverte pour les modules externes
__all__ = ['discover_3d_templates']

# SÃ©curitÃ©â€¯: aucun code exÃ©cutable Ã  lâ€™import, pas dâ€™exÃ©cution dynamique non contrÃ´lÃ©e
# Extensibleâ€¯: ajoutez vos templates, assets, scripts ou plugins 3D dans ce dossier
# Multilingueâ€¯: voir doc/README pour la documentation multilingue

"""
Dihya â€“ Django Transport API Routes Ultra AvancÃ©
------------------------------------------------
- Endpoints REST pour vÃ©hicules, trajets, horaires, rÃ©servations, tickets, flotte, chauffeurs, IA transport, notifications, rapports, logs, audit
- SÃ©curitÃ©, RBAC, logs, chiffrement, conformitÃ© RGPD/NIS2, anonymisation, multilingue, extensibilitÃ©, fallback IA open source
- PrÃªt pour CI/CD, Codespaces, cloud souverain, production, dÃ©mo, contribution

ðŸ‡«ðŸ‡· Routes Django REST transport (sÃ©curitÃ©, multilingue, souverainetÃ©)
ðŸ‡¬ðŸ‡§ Django REST transport routes (security, multilingual, sovereignty)
ðŸ‡¦ðŸ‡ª Ù…Ø³Ø§Ø±Ø§Øª Django REST Ù„Ù„Ù†Ù‚Ù„ (Ø§Ù„Ø£Ù…Ø§Ù†ØŒ Ù…ØªØ¹Ø¯Ø¯ Ø§Ù„Ù„ØºØ§ØªØŒ Ø§Ù„Ø³ÙŠØ§Ø¯Ø©)
âµ£ Iwalen Django REST n tazwart n tamsalt (amatu, multilingual, sovereignty)
"""

from rest_framework import routers
from django.urls import path, include
from . import views

router = routers.DefaultRouter()
router.register(r'vehicules', views.VehiculeViewSet, basename='vehicule')
router.register(r'trajets', views.TrajetViewSet, basename='trajet')
router.register(r'horaires', views.HoraireViewSet, basename='horaire')
router.register(r'reservations', views.ReservationViewSet, basename='reservation')
router.register(r'tickets', views.TicketViewSet, basename='ticket')
router.register(r'flotte', views.FlotteViewSet, basename='flotte')
router.register(r'chauffeurs', views.ChauffeurViewSet, basename='chauffeur')
router.register(r'ia', views.IATransportViewSet, basename='ia-transport')
router.register(r'notifications', views.NotificationViewSet, basename='notification')
router.register(r'rapports', views.RapportViewSet, basename='rapport')
router.register(r'logs', views.LogTransportViewSet, basename='log-transport')
router.register(r'audit/logs', views.AuditLogViewSet, basename='audit-log')

urlpatterns = [
    path('', include(router.urls)),
]

# SÃ©curitÃ©â€¯: endpoints protÃ©gÃ©s JWT, RBAC, logs, chiffrement, anonymisation, audit, conformitÃ© RGPD/NIS2
# Multilingueâ€¯: tous les messages dâ€™erreur/succÃ¨s sont traduits (voir serializers.py)
# Fallback IA open sourceâ€¯: tous les endpoints critiques disposent dâ€™un fallback open source
# Extensibleâ€¯: ajoutez vos endpoints (analyse IA, open data, gÃ©nÃ©ration doc, etc.)
# PrÃªt CI/CD, Codespaces, cloud souverain, production, dÃ©mo, contribution
